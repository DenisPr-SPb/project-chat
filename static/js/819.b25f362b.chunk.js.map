{"version":3,"file":"static/js/819.b25f362b.chunk.js","mappings":"oKACA,GAAgB,iBAAmB,kCAAkC,aAAe,8BAA8B,eAAiB,gCAAgC,YAAc,6BAA6B,UAAY,2BAA2B,aAAe,8BAA8B,OAAS,wBAAwB,sBAAwB,uCAAuC,4BAA8B,6CAA6C,0BAA4B,4C,SCEle,SAASA,EAAUC,GAAsB,IAAlBC,EAAID,EAAJC,KAAMC,EAAMF,EAANE,OAChC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAMC,aAAcC,UACjCJ,EAAAA,EAAAA,KAACK,EAAAA,GAAO,CAACC,GAAE,YAAAC,OAAgBR,GAAWK,SAAGN,KAGrD,C,+DCAO,SAASU,IACZ,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAa,SAAEC,GAAmB,OAAMA,EAAMC,KAAKH,MAAM,IAClEI,GAAmBH,EAAAA,EAAAA,KAAa,SAAEC,GAAmB,OAAMA,EAAMG,WAAWC,UAAU,IACtFC,GAAiBN,EAAAA,EAAAA,KAAa,SAAEC,GAAmB,OAAMA,EAAMG,WAAWG,QAAQ,IAUxF,OAAMR,GAIES,EAAAA,EAAAA,MAAA,OAAKnB,UAAYC,EAAMmB,iBAAkBjB,SAAA,EAC7CgB,EAAAA,EAAAA,MAAA,OAAKnB,UAAYC,EAAMoB,aAAclB,SAAA,EACjCJ,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAMqB,eAAgBnB,SACjCW,EAAiBS,KAAK,SAAAC,GAAS,OAAIzB,EAAAA,EAAAA,KAACJ,EAAU,CACCE,KAAO2B,EAAU3B,KACjBC,OAAS0B,EAAUC,IAFbD,EAAUC,GAES,OAE9E1B,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAMyB,YAAavB,SAC9Bc,EAAeM,KAAK,SAAAI,GAAG,OAAI5B,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAM2B,UAAWzB,SACZwB,EAAIE,SAAfF,EAAIF,GAA0B,UAG9E1B,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAM6B,sBAAuB3B,UAC1CJ,EAAAA,EAAAA,KAACgC,EAAc,CAACC,YAzBI,WACxBxB,EAAUyB,EAAAA,EAAQC,qBACtB,EAwBwBC,qBAtBa,SAAEC,GACnC5B,EAAUyB,EAAAA,EAAQI,4BAA6BD,GACnD,UAGWrC,EAAAA,EAAAA,KAACuC,EAAAA,GAAQ,CAACjC,GAAK,UAoB9B,CAEA,SAAS0B,EAAcnC,GAA2C,IAAvCuC,EAAoBvC,EAApBuC,qBAAsBH,EAAWpC,EAAXoC,YAK7C,OAAQjC,EAAAA,EAAAA,KAACwC,EAAAA,GAAM,CACXC,cAAgB,CAAEC,eAAgB,IAClCC,SAAW,SAAEC,EAAMC,GAAsB,IAAlBC,EAASD,EAATC,WANL,SAAEF,GACpBR,EAAsBQ,EAC1B,CAKQG,CAAeH,EAAOF,gBACtBT,IACAa,EAAW,CAAEF,OAAQ,IACzB,EAAGxC,SACD,kBAAOJ,EAAAA,EAAAA,KAACgD,EAAAA,GAAI,CAAA5C,UACVgB,EAAAA,EAAAA,MAAA,OAAKnB,UAAYC,EAAM+C,4BAA6B7C,SAAA,EAChDJ,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAACkD,EAAAA,GAAK,CACFpD,KAAO,iBACPqD,GAAK,WACLC,YAAc,kBAGtBpD,EAAAA,EAAAA,KAAA,OAAKC,UAAYC,EAAMmD,0BAA2BjD,UAC9CJ,EAAAA,EAAAA,KAACsD,EAAAA,EAAa,CAACC,KAAO,OAASC,KAAO,iBAG3C,GAEf,CCrEe,SAASC,IACpB,OACIzD,EAAAA,EAAAA,KAACQ,EAAO,GAEhB,C","sources":["webpack://chat/./src/componenst/dialogs/Dialogs.module.css?5b52","componenst/dialogs/DialogItem.js","componenst/dialogs/Dialogs.js","componenst/dialogs/DialogsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs__wrapper\":\"Dialogs_dialogs__wrapper__A+Glt\",\"dialog__info\":\"Dialogs_dialog__info__v4l7r\",\"dialogs__items\":\"Dialogs_dialogs__items__OHWhN\",\"dialog__msg\":\"Dialogs_dialog__msg__de5zF\",\"msg__item\":\"Dialogs_msg__item__NSC5g\",\"dialog__name\":\"Dialogs_dialog__name__4m8eu\",\"active\":\"Dialogs_active__4MvPV\",\"dialog__text__wrapper\":\"Dialogs_dialog__text__wrapper__Qwmph\",\"dialog__text__area__wrapper\":\"Dialogs_dialog__text__area__wrapper__Ijm0U\",\"new__dialog__btn__wrapper\":\"Dialogs_new__dialog__btn__wrapper__N1CH1\"};","import { NavLink } from 'react-router-dom'\r\nimport style from './Dialogs.module.css'\r\n\r\nexport function DialogItem( { name, pathId } ) {\r\n    return (\r\n        <div className={ style.dialog__name }>\r\n            <NavLink to={ `/dialogs/${ pathId }` }>{ name }</NavLink>\r\n        </div>\r\n    )\r\n}","import { DialogItem } from './DialogItem'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport RoundedButton from '../common/buttons/rounded-btn/RoundedButton'\r\nimport style from './Dialogs.module.css'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../state/redux-store'\r\nimport { actions } from '../../state/dialog-reducer'\r\n\r\nexport function Dialogs() {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector( ( state: AppStateType ) => state.auth.isAuth )\r\n    const dialogCompanions = useSelector( ( state: AppStateType ) => state.dialogPage.companions )\r\n    const dialogMessages = useSelector( ( state: AppStateType ) => state.dialogPage.messages )\r\n\r\n    const sendMessageDispatch = () => {\r\n        dispatch( actions.sendMessageCreator() )\r\n    }\r\n\r\n    const updateNewMessageTextDispatch = ( text: string ) => {\r\n        dispatch( actions.updateNewMessageTextCreator( text ) )\r\n    }\r\n\r\n    if ( !isAuth ) {\r\n        return <Navigate to={ '/login' }/>\r\n    }\r\n\r\n    return (<div className={ style.dialogs__wrapper }>\r\n        <div className={ style.dialog__info }>\r\n            <div className={ style.dialogs__items }>\r\n                { dialogCompanions.map( companion => <DialogItem key={ companion.id }\r\n                                                                 name={ companion.name }\r\n                                                                 pathId={ companion.id }/> ) }\r\n            </div>\r\n            <div className={ style.dialog__msg }>\r\n                { dialogMessages.map( msg => <div className={ style.msg__item }\r\n                                                  key={ msg.id }>{ msg.message }</div> ) }\r\n            </div>\r\n        </div>\r\n        <div className={ style.dialog__text__wrapper }>\r\n            <AddMessageForm sendMessage={ sendMessageDispatch }\r\n                            updateNewMessageText={ updateNewMessageTextDispatch }/>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nfunction AddMessageForm( { updateNewMessageText, sendMessage } ) {\r\n    const addNewMessage = ( values ) => {\r\n        updateNewMessageText( values )\r\n    }\r\n\r\n    return (<Formik\r\n        initialValues={ { newMessageBody: '' } }\r\n        onSubmit={ ( values, { resetForm } ) => {\r\n            addNewMessage( values.newMessageBody )\r\n            sendMessage()\r\n            resetForm( { values: '' } )\r\n        } }>\r\n        { () => (<Form>\r\n            <div className={ style.dialog__text__area__wrapper }>\r\n                <div>\r\n                    <Field\r\n                        name={ 'newMessageBody' }\r\n                        as={ 'textarea' }\r\n                        placeholder={ 'enter text' }/>\r\n                </div>\r\n\r\n                <div className={ style.new__dialog__btn__wrapper }>\r\n                    <RoundedButton logo={ 'Send' } type={ 'submit' }/>\r\n                </div>\r\n            </div>\r\n        </Form>) }\r\n    </Formik>)\r\n}","import React from 'react'\r\nimport { Dialogs } from './Dialogs'\r\n\r\n\r\nexport default function DialogsPage() {\r\n    return (\r\n        <Dialogs/>\r\n    )\r\n}"],"names":["DialogItem","_ref","name","pathId","_jsx","className","style","dialog__name","children","NavLink","to","concat","Dialogs","dispatch","useDispatch","isAuth","useSelector","state","auth","dialogCompanions","dialogPage","companions","dialogMessages","messages","_jsxs","dialogs__wrapper","dialog__info","dialogs__items","map","companion","id","dialog__msg","msg","msg__item","message","dialog__text__wrapper","AddMessageForm","sendMessage","actions","sendMessageCreator","updateNewMessageText","text","updateNewMessageTextCreator","Navigate","Formik","initialValues","newMessageBody","onSubmit","values","_ref2","resetForm","addNewMessage","Form","dialog__text__area__wrapper","Field","as","placeholder","new__dialog__btn__wrapper","RoundedButton","logo","type","DialogsPage"],"sourceRoot":""}