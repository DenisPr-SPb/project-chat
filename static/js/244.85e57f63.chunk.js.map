{"version":3,"file":"static/js/244.85e57f63.chunk.js","mappings":"+QAOe,SAASA,EAAaC,IAAKC,EAAAA,EAAAA,GAAAD,GACtC,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,YAAYC,MAAM,IAMjFC,GAA4BC,EAAAA,EAAAA,UAASN,GAAYO,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CD,EAAMG,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAgCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAqB5B,OAjBAG,EAAAA,EAAAA,YAAU,WACNL,EAAUT,EACd,GAAG,CAACA,KAgBAe,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACrCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAkBG,MAAO,CAACC,QAAQ,QAAQH,SAAA,EACrDF,EAAAA,EAAAA,KAAA,OAAAE,SAAK,cACHL,IACEG,EAAAA,EAAAA,KAAA,OAAKM,QAlBrB,WACI,OAAOR,GAAY,EACvB,EAgBgDG,UAAU,eAAcC,SACnDb,GAAU,SAGlBQ,IACGG,EAAAA,EAAAA,KAAA,SACIO,SAfpB,SAAwBC,GACpBd,EAAUc,EAAEC,cAAcC,MAC9B,EAcoBC,WAAW,EACXC,OAtBpB,WACId,GAAY,GAnBa,SAACT,GAE1BN,GAAS8B,EAAAA,EAAAA,IAAaxB,GAC1B,CAiBIyB,CAAqBzB,EACzB,EAoBoBY,UAAU,gBACVS,MAAOrB,QAI/B,C,aCxDA,GAAgB,6BAA+B,kDAAkD,WAAa,gCAAgC,YAAc,iCAAiC,aAAe,kCAAkC,aAAe,kCAAkC,iBAAmB,sCAAsC,OAAS,4BAA4B,MAAQ,4BCErY,SAAS0B,EAAQlC,GAA+B,IAA5BmC,EAAUnC,EAAVmC,WAAYC,EAAYpC,EAAZoC,aAC5B,OACId,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAMc,EAAW,KAAGC,IAE5B,CAEe,SAASC,EAAWC,GAAqC,IAAnCC,EAAOD,EAAPC,QAASC,EAAOF,EAAPE,QAASC,EAAYH,EAAZG,aAEnD,OACInB,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMmB,6BAA6BrB,SAAA,EAC/CC,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMoB,WAAWtB,SAAA,CAAC,SAAOkB,EAAQK,aACjDtB,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMsB,YAAYxB,SAAA,CAAC,aAAWkB,EAAQO,YACtDxB,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMwB,aAAa1B,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMyB,aAAa3B,SAAA,CAAC,sBAAoBkB,EAAQU,eAAiB,MAAQ,QACxFV,EAAQU,iBACL3B,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMyB,aAAa3B,SAAA,CAAC,cAAYkB,EAAQW,iCAGhE5B,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAM4B,iBAAiB9B,SAAA,CAAC,aACzB+B,OAAOC,KAAKd,EAAQe,UAAUC,KAAI,SAACC,GAC9C,OAAOrC,EAAAA,EAAAA,KAACe,EAAQ,CAAWC,WAAYqB,EAAKpB,aAAcG,EAAQe,SAASE,IAArDA,EAC1B,OAGEhB,IAAWrB,EAAAA,EAAAA,KAACsC,EAAAA,EAAa,CAACC,KAAM,OAAQC,OAAQlB,MAG9D,C,cCvBe,SAASmB,EAAe5D,GAAgC,IAA9BuC,EAAOvC,EAAPuC,QAASsB,EAAiB7D,EAAjB6D,kBAI9C,IAAM3D,GAAWC,EAAAA,EAAAA,MAMX2D,EAAgBvB,EAGtB,SAASwB,EAAiBpC,GACtBmC,EAAcb,eAAoC,SAAnBtB,EAAEqC,OAAOnC,KAC5C,CAQA,OAZCU,EAAQO,QAAuCgB,EAAchB,QAAUP,EAAQO,QAA7DgB,EAAchB,QAAU,IAavCxB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,KAAC8C,EAAAA,GAAM,CACHH,cAAeA,EACfI,SAAU,SAACC,EAAM7B,GAAmB,IAAhB8B,EAAS9B,EAAT8B,WA1BhC,SAA2BD,GACvBN,EAAkBM,EACtB,CAyBgBE,CAAmBF,GACnBC,EAAW,CAACD,OAAQ,IAAK,EAAE9C,SAC9B,kBACGC,EAAAA,EAAAA,MAACgD,EAAAA,GAAI,CAAAjD,SAAA,EACDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,CACxB+B,OAAOC,KAAKS,GACRS,QAAO,SAAAf,GACJ,MAAgB,mBAARA,GACO,8BAARA,GACQ,aAARA,GACQ,WAARA,GACQ,WAARA,CACX,IAAID,KAAI,SAAA1B,GACT,OAAOP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EAAiBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOQ,IAAa,KAACV,EAAAA,EAAAA,KAACqD,EAAAA,GAAK,CAACpD,UAAU,QAAoBqD,KAAM5C,EAAO6C,YAAa7C,GAAjCA,KAA1DA,EACpB,KAEAP,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CAAO,sBAEHF,EAAAA,EAAAA,KAACqD,EAAAA,GAAK,CAACG,KAAM,WAAYF,KAAM,iBAAkBhD,QAASsC,OAE7DD,EAAcb,iBAAkB3B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,sBACNF,EAAAA,EAAAA,KAACqD,EAAAA,GAAK,CACFC,KAAM,4BACNC,YAAa,wBAGrBpD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,cACL+B,OAAOC,KAAKS,EAAcR,UACtBC,KAAI,SAAAC,GAID,OAHoC,OAAhCM,EAAcR,SAASE,KACxBM,EAAcR,SAASE,GAAO,KAG7BlC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,QAAAE,SAA2BmC,GAAG,QAAAoB,OAAXpB,KACnBrC,EAAAA,EAAAA,KAACqD,EAAAA,GAAK,CAACpD,UAAU,QAAkBqD,KAAI,YAAAG,OAAcpB,GAAOkB,YAAalB,GAA3CA,KAAiD,OAAAoB,OAFlEpB,GAKzB,WAIZrC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEC,UACbF,EAAAA,EAAAA,KAACsC,EAAAA,EAAa,CAACC,KAAM,OAAQiB,KAAM,eAEpC,KAIfrD,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qBACPF,EAAAA,EAAAA,KAAA,SAAOC,UAAWG,EAAMsD,MAAOF,KAAM,OAAQjD,SAhEzD,SAA+BC,GACvBA,EAAEqC,OAAOc,MAAMC,SACGpD,EAAEqC,OAAOc,MAAM,GAZrC5E,GAAS8E,EAAAA,EAAAA,OAcb,SAgEJ,CC3FA,OAAgB,cAAgB,mCAAmC,kBAAoB,uCAAuC,uBAAyB,4CAA4C,aAAe,mCCgB3M,SAASC,EAAWjF,GAAyB,IAAtBwC,EAAOxC,EAAPwC,QAC1B/B,GAAgCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCO,EAAQL,EAAA,GAAEM,EAAWN,EAAA,GACtB4B,GAAUlC,EAAAA,EAAAA,KAAY,SAACC,GAAkB,OAAKA,EAAMC,YAAYgC,OAAO,IACvErC,GAAWC,EAAAA,EAAAA,MAMjB,IAAKoC,EACD,OAAOpB,EAAAA,EAAAA,KAAC+D,EAAAA,EAAS,IAQrB,OACI5D,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAM4D,cAAc9D,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAWG,EAAM6D,kBAAkB/D,UACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAWG,EAAM8D,aAAahE,UAC/BF,EAAAA,EAAAA,KAAA,OAAKmE,IAAK/C,EAAQgD,OAAOC,MAAQjD,EAAQgD,OAAOC,MAAQC,EAASC,IAAI,UAK7EpE,EAAAA,EAAAA,MAAA,OAAKF,UAAWG,EAAMoE,uBAAuBtE,SAAA,EACzCF,EAAAA,EAAAA,KAACpB,EAAa,IAEbiB,GACKG,EAAAA,EAAAA,KAACyC,EAAe,CAACrB,QAASA,EAASsB,kBAlBrD,SAA6B+B,IATG,SAACA,GAE7B1F,GAAS2F,EAAAA,EAAAA,IAAgBD,GAC7B,CAOIE,CAAwBF,GACxB3E,GAAY,EAChB,KAgBkBE,EAAAA,EAAAA,KAACkB,EAAW,CAACE,QAASA,EAASC,QAASA,EAASC,aAAc,WAAOxB,GAAY,EAAK,SAI7G,CCrDO,SAAS8E,EAAI/F,GAAoB,IAAhBgG,EAAIhG,EAAJgG,KAAMC,EAAIjG,EAAJiG,KAC1B,OACI3E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBACfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SAAG2E,KAC9B7E,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,CAAC,UAAS4E,SAItD,CCJO,SAASC,EAAOlG,GAAe,IAAXmG,EAAKnG,EAALmG,MAEvB,OACI7E,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eAERC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UAC/BF,EAAAA,EAAAA,KAACiF,EAAW,CAACC,kBAAoBF,EAAME,kBAAoBC,QAAUH,EAAMG,aAE/EnF,EAAAA,EAAAA,KAAA,OAAAE,SACM8E,EAAMI,UAAUhD,KAAK,SAAAiD,GAAE,OAAIrF,EAAAA,EAAAA,KAAC4E,EAAI,CAAeC,KAAOQ,EAAGR,KAAOC,KAAOO,EAAGC,MACzCC,GAAKF,EAAGE,IADFF,EAAGE,GACK,WAKrE,CAEA,SAASN,EAAW9D,GAAoC,IAAhC+D,EAAiB/D,EAAjB+D,kBAAmBC,EAAOhE,EAAPgE,QAMvC,OACInF,EAAAA,EAAAA,KAAC8C,EAAAA,GAAM,CACHH,cAAgB,CAAE6C,YAAa,IAC/BzC,SAAW,SAAEC,EAAMyC,GAAsB,IAAlBxC,EAASwC,EAATxC,WARZ,SAAED,GACjBkC,EAAmBlC,GACnBmC,GACJ,CAMYO,CAAY1C,EAAOwC,aACnBvC,EAAW,CAAED,OAAQ,IACzB,EAAG9C,SACD,kBACEC,EAAAA,EAAAA,MAACgD,EAAAA,GAAI,CAAAjD,SAAA,EACDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEC,UACbF,EAAAA,EAAAA,KAACqD,EAAAA,GAAK,CACFC,KAAO,cACPqC,GAAK,WACLpC,YAAc,kBAGtBvD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,GAAEC,UACbF,EAAAA,EAAAA,KAACsC,EAAAA,EAAa,CAACC,KAAO,OAASiB,KAAO,eAEvC,GAIvB,CCjDA,SAASoC,EAAiBZ,GACtB,OACIhF,EAAAA,EAAAA,KAAC+E,EAAO,CACJC,MAAQA,GAGpB,CAoBA,OAAea,EAAAA,EAAAA,KAlBf,SAA0B1G,GACtB,MAAO,CACH2G,YAAa3G,EAAMC,YAAY0G,YAC/BV,UAAWjG,EAAMC,YAAY2G,MAErC,IAEA,SAA6BhH,GACzB,MAAO,CACHmG,kBAAmB,SAAEc,GACjBjH,EAAUkH,EAAAA,GAAQC,+BAAgCF,GACtD,EACAb,QAAS,WACLpG,EAAUkH,EAAAA,GAAQE,uBACtB,EAER,GAEA,CAA+DC,EAAAA,KAAYR,IC/B3E,EAAmC,kCCG5B,SAASS,EAAOxH,GAAiB,IAAbwC,EAAOxC,EAAPwC,QACvB,OACIlB,EAAAA,EAAAA,MAAA,OAAKF,UAAYG,EAAwBF,SAAA,EACrCF,EAAAA,EAAAA,KAAC8D,EAAW,CACRzC,QAAUA,KACdrB,EAAAA,EAAAA,KAACsG,EAAgB,MAG7B,C,cCRIC,EAA6B,SAAEpH,GAC/B,MAAO,CACHqH,OAAQrH,EAAMsH,KAAKD,OAE3B,E,cCiBME,EAAgB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CA6BjB,OA7BiBC,EAAAA,EAAAA,GAAAR,EAAA,EAAArE,IAAA,iBAAA3B,MAElB,WACI,IAAIyG,EAASC,KAAKpC,MAAMqC,OAAOC,OAAOH,OAEhCA,IACFA,EAASC,KAAKpC,MAAMuC,cAExBH,KAAKpC,MAAMwC,eAAgBL,GAC3BC,KAAKpC,MAAMyC,UAAWN,EAC1B,GAAC,CAAA9E,IAAA,oBAAA3B,MAED,WACI0G,KAAKM,gBACT,GAEA,CAAArF,IAAA,qBAAA3B,MACA,SAAoBiH,EAAWC,EAAWC,GACjCT,KAAKpC,MAAMqC,OAAOC,OAAOH,SAAWQ,EAAUN,OAAOC,OAAOH,QAC7DC,KAAKM,gBAEb,GAAC,CAAArF,IAAA,SAAA3B,MAED,WACI,OACIV,EAAAA,EAAAA,KAACqG,EAAO,CACJhF,SAAW+F,KAAKpC,MAAMqC,OAAOC,OAAOH,QAGhD,KAACT,CAAA,CA7BiB,CAASN,EAAAA,WAwD/B,OAAe0B,EAAAA,EAAAA,KACXjC,EAAAA,EAAAA,KAzBJ,SAA0B1G,GACtB,MAAO,CACHiC,QAASjC,EAAMC,YAAYgC,QAC3B/B,OAAQF,EAAMC,YAAYC,OAC1BkI,aAAcpI,EAAMsH,KAAKU,OAEjC,GAmB8B,CAAEK,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,MAjBhD,SAAqBM,GAajB,OAZA,SAAkC/C,GAC9B,IAAIgD,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXb,GAASc,EAAAA,EAAAA,MACb,OACIpI,EAAAA,EAAAA,KAAC+H,GAASM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDrD,GAAK,IACVqC,OAAS,CAAEW,SAAAA,EAAUE,SAAAA,EAAUZ,OAAAA,KAG3C,CAGJ,IDrEO,SAA2BS,GAM9B,OAAOlC,EAAAA,EAAAA,IAASU,EAA4B,CAAC,EAAtCV,EALmB,SAAEb,GACxB,OAAMA,EAAMwB,QACLxG,EAAAA,EAAAA,KAAC+H,GAASM,EAAAA,EAAAA,GAAA,GAAMrD,KADKhF,EAAAA,EAAAA,KAACsI,EAAAA,GAAQ,CAACC,GAAK,UAE/C,GAGJ,GCgEA,CAIG7B,E","sources":["componenst/profile/profileInfo/ProfileStatus.tsx","componenst/profile/profileInfo/profileData/ProfileData.module.css","componenst/profile/profileInfo/profileData/ProfileData.js","componenst/profile/profileInfo/profileData/ProfileDataForm.js","webpack://chat/./src/componenst/profile/profileInfo/ProfileInfo.module.css?ff1f","componenst/profile/profileInfo/ProfileInfo.tsx","componenst/profile/myposts/posts/Post.js","componenst/profile/myposts/MyPosts.js","componenst/profile/myposts/MyPostsContainer.js","componenst/profile/Profile.module.css","componenst/profile/Profile.js","componenst/hocs/withAuthRedirect.js","componenst/profile/ProfileContainer.tsx"],"sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {useState, useEffect} from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../state/redux-store'\r\nimport { updateStatus } from '../../../state/profile-reducer'\r\n\r\n\r\nexport default function ProfileStatus({}) {\r\n    const dispatch = useDispatch()\r\n\r\n    const propsStatus = useSelector((state: AppStateType) => state.profilePage.status)\r\n    const updateStatusDispatch = (status: string) => {\r\n        //@ts-ignore\r\n        dispatch(updateStatus(status))\r\n    }\r\n\r\n    const [status, setStatus] = useState(propsStatus)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(propsStatus)\r\n    }, [propsStatus])\r\n\r\n    function activateEditMode () {\r\n        return setEditMode(true)\r\n    }\r\n\r\n    function deactivateEditMOde () {\r\n        setEditMode(false)\r\n        updateStatusDispatch(status)\r\n    }\r\n\r\n    function onStatusChange(e: ChangeEvent<HTMLInputElement>) {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile__status__wrapper\">\r\n            <div className=\"profile__status\" style={{display:\"flex\"}}>\r\n                <div>Status: </div>\r\n                {!editMode &&\r\n                    <div onClick={activateEditMode} className=\"status__text\">\r\n                        {status || '----'}\r\n                    </div>}\r\n\r\n                {editMode &&\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMOde}\r\n                        className=\"status__input\"\r\n                        value={status}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"info__description__container\":\"ProfileData_info__description__container__gi1Qq\",\"info__name\":\"ProfileData_info__name__wojJH\",\"info__about\":\"ProfileData_info__about__idj9T\",\"job__wrapper\":\"ProfileData_job__wrapper__9pfB4\",\"job__looking\":\"ProfileData_job__looking__Q0Ip6\",\"contact__wrapper\":\"ProfileData_contact__wrapper__KqXFt\",\"editor\":\"ProfileData_editor__fnQ4u\",\"input\":\"ProfileData_input__Mplzj\"};","import RoundedButton from \"../../../common/buttons/rounded-btn/RoundedButton\";\r\nimport style from \"./ProfileData.module.css\"\r\n\r\nfunction Contacts ({contactKey, contactValue}) {\r\n    return (\r\n        <div>{contactKey}: {contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default function ProfileData({profile, isOwner, goToEditMode }) {\r\n\r\n    return (\r\n        <div className={style.info__description__container}>\r\n            <div className={style.info__name}>Name: {profile.fullName}</div>\r\n            <div className={style.info__about}>About me: {profile.aboutMe}</div>\r\n            <div className={style.job__wrapper}>\r\n                <div className={style.job__looking}>Looking for a job: {profile.lookingForAJob ? 'YES' : 'NO'}</div>\r\n                {profile.lookingForAJob &&\r\n                    <div className={style.job__looking}>My skills: {profile.lookingForAJobDescription}</div>\r\n                }\r\n            </div>\r\n            <div className={style.contact__wrapper}>\r\n                Contacts: {Object.keys(profile.contacts).map((key) => {\r\n                return <Contacts key={key} contactKey={key} contactValue={profile.contacts[key]}/>\r\n            })\r\n            }\r\n            </div>\r\n            { isOwner && <RoundedButton logo={'edit'} action={goToEditMode}/>}\r\n        </div>\r\n    )\r\n}","import RoundedButton from \"../../../common/buttons/rounded-btn/RoundedButton\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport style from \"./ProfileData.module.css\";\r\nimport { savePhoto } from '../../../../state/profile-reducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nexport default function ProfileDataForm({profile, updateProfileData}) {\r\n    function addNewProfileData(values) {\r\n        updateProfileData(values)\r\n    }\r\n    const dispatch = useDispatch()\r\n\r\n    const savePhotoDispatch = () => {\r\n        dispatch(savePhoto())\r\n    }\r\n\r\n    const initialValues = profile\r\n    !profile.aboutMe ? initialValues.aboutMe = '' : initialValues.aboutMe = profile.aboutMe\r\n\r\n    function jobLookingStatus(e) {\r\n        initialValues.lookingForAJob = e.target.value !== 'true';\r\n    }\r\n\r\n    function onAvatarPhotoSelected(e) {\r\n        if (e.target.files.length) {\r\n            savePhotoDispatch(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile__form\">\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    addNewProfileData( values )\r\n                    resetForm( {values: ''} )}}>\r\n                {() => (\r\n                    <Form>\r\n                        <div className=\"form__fields\">\r\n                            {Object.keys(initialValues)\r\n                                .filter(key => {\r\n                                    return (key !== 'lookingForAJob'\r\n                                        && key !== 'lookingForAJobDescription'\r\n                                        && key !== 'contacts'\r\n                                        && key !== 'photos'\r\n                                        && key !== 'userId')\r\n                                } ).map(value => {\r\n                               return <div key={value}><span>{value}</span> <Field className=\"field\" key={value} name={value} placeholder={value}/></div>\r\n                            })}\r\n\r\n                            <label>\r\n                                Looking for a job:\r\n                                <Field type={'checkbox'} name={'lookingForAJob'} onClick={jobLookingStatus}/>\r\n                            </label>\r\n                            {initialValues.lookingForAJob && <div>\r\n                                <span>About my skills:</span>\r\n                                <Field\r\n                                    name={'lookingForAJobDescription'}\r\n                                    placeholder={'what about job?'}/>\r\n                            </div>}\r\n\r\n                            <div className=\"form__contacts\">\r\n                                <span>CONTACTS:</span>\r\n                                {Object.keys(initialValues.contacts)\r\n                                    .map(key => {\r\n                                        if (initialValues.contacts[key] === null) {\r\n                                           initialValues.contacts[key] = ''\r\n                                        }\r\n                                        return (\r\n                                            <div key={`div-${key}`}>\r\n                                                <span key={`span-${key}`}>{key}</span>\r\n                                                <Field className=\"field\" key={key} name={`contacts.${key}`} placeholder={key}/>\r\n                                            </div>\r\n                                        )\r\n                                    } )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"\">\r\n                            <RoundedButton logo={'Send'} type={'submit'}/>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n            <div>\r\n                <label> Change avatar:</label>\r\n                <input className={style.input} type={'file'} onChange={onAvatarPhotoSelected}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"info__wrapper\":\"ProfileInfo_info__wrapper__KP3ip\",\"avatar__container\":\"ProfileInfo_avatar__container__Mt2yk\",\"description__container\":\"ProfileInfo_description__container__ZYUXG\",\"info__avatar\":\"ProfileInfo_info__avatar__XWn1K\"};","import Preloader from '../../common/Preloader'\r\nimport avaPlug from '../../../assets/images/ava.jpg'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport { useState } from 'react'\r\nimport ProfileData from './profileData/ProfileData'\r\nimport ProfileDataForm from './profileData/ProfileDataForm'\r\nimport style from './ProfileInfo.module.css'\r\nimport { ProfileType } from '../../../types/types'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../../state/redux-store'\r\nimport { saveProfileData } from '../../../state/profile-reducer'\r\n\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nexport function ProfileInfo({ isOwner }: PropsType){\r\n    const [editMode, setEditMode] = useState(false)\r\n    const profile = useSelector((state:AppStateType) => state.profilePage.profile)\r\n    const dispatch = useDispatch()\r\n    const saveProfileDataDispatch = (formData: {formData: ProfileType}) => {\r\n        //@ts-ignore\r\n        dispatch(saveProfileData(formData))\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    function onUpdateProfileData(formData: {formData: ProfileType}){\r\n        saveProfileDataDispatch(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={style.info__wrapper}>\r\n            <div className={style.avatar__container}>\r\n                <div className={style.info__avatar}>\r\n                    <img src={profile.photos.small ? profile.photos.small : avaPlug} alt=\"\"/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className={style.description__container}>\r\n                <ProfileStatus/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm profile={profile} updateProfileData={onUpdateProfileData}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {setEditMode(true)}}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export function Post( { post, like } ) {\r\n    return (\r\n        <div className=\"post__item__wrapper\">\r\n            <div className=\"post__avatar\"></div>\r\n            <div className=\"post__text\">{ post }</div>\r\n            <div className=\"post__setup\">\r\n                <div className=\"post__likes\">Likes: { like }</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Post } from './posts/Post'\r\nimport React from 'react'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport RoundedButton from '../../common/buttons/rounded-btn/RoundedButton'\r\n\r\n\r\nexport function MyPosts( { props } ) {\r\n\r\n    return (\r\n        <div className=\"posts__wrapper\">\r\n            <div>\r\n                <h3>My post</h3>\r\n            </div>\r\n            <div className=\"post__wrapper\">\r\n                <div className=\"new__post__wrapper\">\r\n                    <AddPostForm updateNewPostText={ props.updateNewPostText } addPost={ props.addPost }/>\r\n                </div>\r\n                <div>\r\n                    { props.postsData.map( el => <Post key={ el.id } post={ el.post } like={ el.likes }\r\n                                                       id={ el.id }/> ) }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AddPostForm( { updateNewPostText, addPost } ) {\r\n    const addNewPost = ( values ) => {\r\n        updateNewPostText( values )\r\n        addPost()\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={ { newPostBody: '' } }\r\n            onSubmit={ ( values, { resetForm } ) => {\r\n                addNewPost( values.newPostBody )\r\n                resetForm( { values: '' } )\r\n            } }>\r\n            { () => (\r\n                <Form>\r\n                    <div className=\"\">\r\n                        <Field\r\n                            name={ 'newPostBody' }\r\n                            as={ 'textarea' }\r\n                            placeholder={ 'enter text' }/>\r\n                    </div>\r\n\r\n                    <div className=\"\">\r\n                        <RoundedButton logo={ 'Send' } type={ 'submit' }/>\r\n                    </div>\r\n                </Form>\r\n            ) }\r\n        </Formik>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { actions } from '../../../state/profile-reducer'\r\nimport { MyPosts } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction MyPostContainer( props ) {\r\n    return (\r\n        <MyPosts\r\n            props={ props }\r\n        />\r\n    )\r\n}\r\n\r\nfunction mapStateToProps( state ) {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        postsData: state.profilePage.posts\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        updateNewPostText: ( text ) => {\r\n            dispatch( actions.updateNewPostTextActionCreator( text ) )\r\n        },\r\n        addPost: () => {\r\n            dispatch( actions.addPostActionCreator() )\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( React.memo( MyPostContainer ) )","// extracted by mini-css-extract-plugin\nexport default {\"profile__wrapper\":\"Profile_profile__wrapper__A2QPH\"};","import { ProfileInfo } from './profileInfo/ProfileInfo'\r\nimport MyPostsContainer from './myposts/MyPostsContainer'\r\nimport style from './Profile.module.css'\r\n\r\nexport function Profile( { isOwner } ) {\r\n    return (\r\n        <div className={ style.profile__wrapper }>\r\n            <ProfileInfo\r\n                isOwner={ isOwner }/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsForRedirect = ( state ) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect( Component ) {\r\n    const RedirectComponent = ( props ) => {\r\n        if ( !props.isAuth ) return <Navigate to={ '/login' }/>\r\n        return <Component { ...props } />\r\n    }\r\n\r\n    return connect( mapStateToPropsForRedirect, {} )( RedirectComponent )\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Profile } from './Profile'\r\nimport { getStatus, getUserProfile } from '../../state/profile-reducer'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../hocs/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { ProfileType } from '../../types/types'\r\nimport { AppStateType } from '../../state/redux-store'\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    loggedUserId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: ( userId: number ) => void\r\n    getStatus: ( userId: number ) => void\r\n}\r\ntype OwnPropsType = {\r\n    router: any\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\ntype StateType = {}\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n\r\n    profileRefresh() {\r\n        let userId = this.props.router.params.userId\r\n\r\n        if ( !userId ) {\r\n            userId = this.props.loggedUserId\r\n        }\r\n        this.props.getUserProfile( userId )\r\n        this.props.getStatus( userId )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.profileRefresh()\r\n    }\r\n\r\n    //@ts-ignore\r\n    componentDidUpdate( prevProps, prevState, snapshot ) {\r\n        if ( this.props.router.params.userId !== prevProps.router.params.userId ) {\r\n            this.profileRefresh()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                isOwner={ !this.props.router.params.userId }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps( state: AppStateType ): MapStatePropsType {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        loggedUserId: state.auth.userId,\r\n    }\r\n}\r\n\r\nfunction withRouter( Component: any ) {\r\n    function ComponentWithRouterProp( props: any ) {\r\n        let location = useLocation()\r\n        let navigate = useNavigate()\r\n        let params = useParams()\r\n        return (\r\n            <Component\r\n                { ...props }\r\n                router={ { location, navigate, params } }\r\n            />\r\n        )\r\n    }\r\n\r\n    return ComponentWithRouterProp\r\n}\r\n\r\nexport default compose(\r\n    connect( mapStateToProps, { getUserProfile, getStatus } ),\r\n    withRouter,\r\n    withAuthRedirect\r\n)( ProfileContainer )"],"names":["ProfileStatus","_ref","_objectDestructuringEmpty","dispatch","useDispatch","propsStatus","useSelector","state","profilePage","status","_useState","useState","_useState2","_slicedToArray","setStatus","_useState3","_useState4","editMode","setEditMode","useEffect","_jsx","className","children","_jsxs","style","display","onClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","updateStatusDispatch","Contacts","contactKey","contactValue","ProfileData","_ref2","profile","isOwner","goToEditMode","info__description__container","info__name","fullName","info__about","aboutMe","job__wrapper","job__looking","lookingForAJob","lookingForAJobDescription","contact__wrapper","Object","keys","contacts","map","key","RoundedButton","logo","action","ProfileDataForm","updateProfileData","initialValues","jobLookingStatus","target","Formik","onSubmit","values","resetForm","addNewProfileData","Form","filter","Field","name","placeholder","type","concat","input","files","length","savePhoto","ProfileInfo","Preloader","info__wrapper","avatar__container","info__avatar","src","photos","small","avaPlug","alt","description__container","formData","saveProfileData","saveProfileDataDispatch","Post","post","like","MyPosts","props","AddPostForm","updateNewPostText","addPost","postsData","el","likes","id","newPostBody","_ref3","addNewPost","as","MyPostContainer","connect","newPostText","posts","text","actions","updateNewPostTextActionCreator","addPostActionCreator","React","Profile","MyPostsContainer","mapStateToPropsForRedirect","isAuth","auth","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","loggedUserId","getUserProfile","getStatus","profileRefresh","prevProps","prevState","snapshot","compose","Component","location","useLocation","navigate","useNavigate","useParams","_objectSpread","Navigate","to"],"sourceRoot":""}